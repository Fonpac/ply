
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND_OR BOOL BOOL CLOSE_PAR COLON DIVIDE ELSE END EQUALS IDENTIFIER IF MINUS NOT NUM OPEN_PAR PLUS REL_OP THEN TIMES TOprogram : statement other_statementstatement : assign\n                 | expression\n                 | if\n    assign : IDENTIFIER EQUALS expressionother_statement : statement other_statement\n                       | empty\n    expression : num_expression\n                  | bool_expression\n                  | func\n                  | call_func\n    bool_expression : BOOLbool_expression : NOT bool_expressionbool_expression : num_expression REL_OP num_expressionbool_expression : bool_expression AND_OR bool_expressionbool_expression : OPEN_PAR bool_expression CLOSE_PARbool_expression : COLON IDENTIFIERnum_expression : num_expression PLUS num_expression\n                      | num_expression MINUS num_expression\n                      | num_expression TIMES num_expression\n                      | num_expression DIVIDE num_expression\n    num_expression : OPEN_PAR num_expression CLOSE_PARnum_expression : MINUS num_expressionnum_expression : NUMnum_expression : COLON IDENTIFIERfunc : TO IDENTIFIER opt_args statement ENDopt_args : IDENTIFIER opt_args\n                | emptyopt_params : expression opt_params\n                  | emptycall_func : IDENTIFIER opt_paramsif : IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else ENDpossible_else : ELSE statement END\n                     | emptyempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,14,15,16,18,19,22,23,24,25,26,36,38,39,40,43,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[6,6,-2,-3,-4,22,-8,-9,-10,-11,-24,39,-12,44,6,22,22,22,-31,-30,-23,58,-17,-13,60,61,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,61,6,-28,-27,6,-26,6,-32,]),'IF':([0,2,3,4,5,6,7,8,9,10,14,16,19,22,24,25,26,36,39,40,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[11,11,-2,-3,-4,-35,-8,-9,-10,-11,-24,-12,11,-35,-35,-31,-30,-23,-17,-13,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,11,-28,-27,11,-26,11,-32,]),'OPEN_PAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,36,37,39,40,42,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[12,12,-2,-3,-4,12,-8,-9,-10,-11,33,12,37,-24,-12,42,12,12,12,12,-31,-30,37,37,37,37,37,42,42,-23,37,-17,-13,42,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,12,-28,-27,12,-26,12,-32,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,39,40,41,42,44,46,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,63,65,67,68,71,73,],[13,13,-2,-3,-4,13,28,-9,-10,-11,13,13,-24,-12,13,13,13,13,13,-31,-30,13,13,13,13,13,13,13,28,-23,13,-17,-13,28,13,-35,-5,-29,-18,-19,-20,-21,28,-15,-22,-16,28,-25,28,-17,-35,13,-28,-27,13,-26,13,-32,]),'NUM':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,36,37,39,40,42,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[14,14,-2,-3,-4,14,-8,-9,-10,-11,14,14,-24,-12,14,14,14,14,14,-31,-30,14,14,14,14,14,14,14,-23,14,-17,-13,14,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,14,-28,-27,14,-26,14,-32,]),'COLON':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,36,37,39,40,42,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[15,15,-2,-3,-4,15,-8,-9,-10,-11,15,38,-24,-12,43,15,15,15,15,-31,-30,38,38,38,38,38,43,43,-23,38,-17,-13,43,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,15,-28,-27,15,-26,15,-32,]),'BOOL':([0,2,3,4,5,6,7,8,9,10,12,14,16,17,19,22,23,24,25,26,32,33,36,39,40,42,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[16,16,-2,-3,-4,16,-8,-9,-10,-11,16,-24,-12,16,16,16,16,16,-31,-30,16,16,-23,-17,-13,16,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,16,-28,-27,16,-26,16,-32,]),'NOT':([0,2,3,4,5,6,7,8,9,10,12,14,16,17,19,22,23,24,25,26,32,33,36,39,40,42,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[17,17,-2,-3,-4,17,-8,-9,-10,-11,17,-24,-12,17,17,17,17,17,-31,-30,17,17,-23,-17,-13,17,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,17,-28,-27,17,-26,17,-32,]),'TO':([0,2,3,4,5,6,7,8,9,10,14,16,19,22,23,24,25,26,36,39,40,44,46,47,48,49,50,51,52,53,55,56,58,60,61,62,63,65,67,68,71,73,],[18,18,-2,-3,-4,18,-8,-9,-10,-11,-24,-12,18,18,18,18,-31,-30,-23,-17,-13,-35,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-35,18,-28,-27,18,-26,18,-32,]),'$end':([1,2,3,4,5,6,7,8,9,10,14,16,19,20,21,22,24,25,26,36,39,40,45,46,47,48,49,50,51,52,53,55,56,58,60,68,73,],[0,-35,-2,-3,-4,-35,-8,-9,-10,-11,-24,-12,-35,-1,-7,-35,-35,-31,-30,-23,-17,-13,-6,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-26,-32,]),'END':([3,4,5,6,7,8,9,10,14,16,22,24,25,26,36,39,40,46,47,48,49,50,51,52,53,55,56,58,60,66,68,69,70,72,73,74,75,],[-2,-3,-4,-35,-8,-9,-10,-11,-24,-12,-35,-35,-31,-30,-23,-17,-13,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,68,-26,-35,73,-34,-32,75,-33,]),'ELSE':([3,4,5,6,7,8,9,10,14,16,22,24,25,26,36,39,40,46,47,48,49,50,51,52,53,55,56,58,60,68,69,73,],[-2,-3,-4,-35,-8,-9,-10,-11,-24,-12,-35,-35,-31,-30,-23,-17,-13,-5,-29,-18,-19,-20,-21,-14,-15,-22,-16,-25,-17,-26,71,-32,]),'EQUALS':([6,],[23,]),'PLUS':([7,14,34,36,39,41,48,49,50,51,52,55,57,58,59,60,],[27,-24,27,-23,-25,27,-18,-19,-20,-21,27,-22,27,-25,27,-25,]),'TIMES':([7,14,34,36,39,41,48,49,50,51,52,55,57,58,59,60,],[29,-24,29,29,-25,29,29,29,-20,-21,29,-22,29,-25,29,-25,]),'DIVIDE':([7,14,34,36,39,41,48,49,50,51,52,55,57,58,59,60,],[30,-24,30,30,-25,30,30,30,-20,-21,30,-22,30,-25,30,-25,]),'REL_OP':([7,14,34,36,39,41,48,49,50,51,55,58,59,60,],[31,-24,31,-23,-25,31,-18,-19,-20,-21,-22,-25,31,-25,]),'AND_OR':([8,14,16,35,36,39,40,48,49,50,51,52,53,54,55,56,58,60,],[32,-24,-12,32,-23,-17,32,-18,-19,-20,-21,-14,32,32,-22,-16,-25,-17,]),'CLOSE_PAR':([14,16,34,35,36,39,40,48,49,50,51,52,53,54,55,56,57,58,59,60,],[-24,-12,55,56,-23,-17,-13,-18,-19,-20,-21,-14,-15,64,-22,-16,55,-25,55,-17,]),'THEN':([64,],[67,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,2,19,62,67,71,],[2,19,19,66,69,74,]),'assign':([0,2,19,62,67,71,],[3,3,3,3,3,3,]),'expression':([0,2,6,19,22,23,24,62,67,71,],[4,4,24,4,24,46,24,4,4,4,]),'if':([0,2,19,62,67,71,],[5,5,5,5,5,5,]),'num_expression':([0,2,6,12,13,17,19,22,23,24,27,28,29,30,31,32,33,37,42,62,67,71,],[7,7,7,34,36,41,7,7,7,7,48,49,50,51,52,41,41,57,59,7,7,7,]),'bool_expression':([0,2,6,12,17,19,22,23,24,32,33,42,62,67,71,],[8,8,8,35,40,8,8,8,8,53,54,35,8,8,8,]),'func':([0,2,6,19,22,23,24,62,67,71,],[9,9,9,9,9,9,9,9,9,9,]),'call_func':([0,2,6,19,22,23,24,62,67,71,],[10,10,10,10,10,10,10,10,10,10,]),'other_statement':([2,19,],[20,45,]),'empty':([2,6,19,22,24,44,61,69,],[21,26,21,26,26,63,63,72,]),'opt_params':([6,22,24,],[25,25,47,]),'opt_args':([44,61,],[62,65,]),'possible_else':([69,],[70,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement other_statement','program',2,'p_program','main.py',103),
  ('statement -> assign','statement',1,'p_statement','main.py',108),
  ('statement -> expression','statement',1,'p_statement','main.py',109),
  ('statement -> if','statement',1,'p_statement','main.py',110),
  ('assign -> IDENTIFIER EQUALS expression','assign',3,'p_assign','main.py',116),
  ('other_statement -> statement other_statement','other_statement',2,'p_other_statement','main.py',125),
  ('other_statement -> empty','other_statement',1,'p_other_statement','main.py',126),
  ('expression -> num_expression','expression',1,'p_expression','main.py',135),
  ('expression -> bool_expression','expression',1,'p_expression','main.py',136),
  ('expression -> func','expression',1,'p_expression','main.py',137),
  ('expression -> call_func','expression',1,'p_expression','main.py',138),
  ('bool_expression -> BOOL','bool_expression',1,'p_bool_expression_bool','main.py',144),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_bool_expression_not','main.py',151),
  ('bool_expression -> num_expression REL_OP num_expression','bool_expression',3,'p_bool_expression_rel_op','main.py',159),
  ('bool_expression -> bool_expression AND_OR bool_expression','bool_expression',3,'p_bool_expression_and_or','main.py',168),
  ('bool_expression -> OPEN_PAR bool_expression CLOSE_PAR','bool_expression',3,'p_bool_expression_bool_expression','main.py',177),
  ('bool_expression -> COLON IDENTIFIER','bool_expression',2,'p_bool_expression_identifier','main.py',186),
  ('num_expression -> num_expression PLUS num_expression','num_expression',3,'p_num_expression','main.py',194),
  ('num_expression -> num_expression MINUS num_expression','num_expression',3,'p_num_expression','main.py',195),
  ('num_expression -> num_expression TIMES num_expression','num_expression',3,'p_num_expression','main.py',196),
  ('num_expression -> num_expression DIVIDE num_expression','num_expression',3,'p_num_expression','main.py',197),
  ('num_expression -> OPEN_PAR num_expression CLOSE_PAR','num_expression',3,'p_num_expression_parenthesis','main.py',212),
  ('num_expression -> MINUS num_expression','num_expression',2,'p_num_expression_minus','main.py',221),
  ('num_expression -> NUM','num_expression',1,'p_num_expression_num','main.py',229),
  ('num_expression -> COLON IDENTIFIER','num_expression',2,'p_num_expression_identifier','main.py',236),
  ('func -> TO IDENTIFIER opt_args statement END','func',5,'p_func','main.py',241),
  ('opt_args -> IDENTIFIER opt_args','opt_args',2,'p_opt_args','main.py',253),
  ('opt_args -> empty','opt_args',1,'p_opt_args','main.py',254),
  ('opt_params -> expression opt_params','opt_params',2,'p_opt_params','main.py',264),
  ('opt_params -> empty','opt_params',1,'p_opt_params','main.py',265),
  ('call_func -> IDENTIFIER opt_params','call_func',2,'p_call_func','main.py',274),
  ('if -> IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else END','if',8,'p_if','main.py',284),
  ('possible_else -> ELSE statement END','possible_else',3,'p_possible_else','main.py',298),
  ('possible_else -> empty','possible_else',1,'p_possible_else','main.py',299),
  ('empty -> <empty>','empty',0,'p_empty','main.py',309),
]
