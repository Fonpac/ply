
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OR BOOL BOOL CLOSE_PAR COLON ELSE END EQUALS IDENTIFIER IF MINUS NOT NUM NUMBER_OP OPEN_PAR REL_OP THEN TOprogram : statement other_statementstatement : assign\n                 | expression\n    assign : IDENTIFIER EQUALS expressionother_statement : statement other_statement\n                       | empty\n    expression : num_expression\n                  | bool_expression\n                  | func\n                  | call_func\n                  | if\n    bool_expression : BOOLbool_expression : NOT bool_expressionbool_expression : num_expression REL_OP num_expressionbool_expression : bool_expression AND_OR bool_expressionbool_expression : OPEN_PAR bool_expression CLOSE_PARbool_expression : COLON IDENTIFIERnum_expression : num_expression NUMBER_OP num_expressionnum_expression : OPEN_PAR num_expression CLOSE_PARnum_expression : MINUS num_expressionnum_expression : NUMnum_expression : COLON IDENTIFIERfunc : TO IDENTIFIER opt_args statement ENDopt_args : IDENTIFIER opt_args\n                | emptyopt_params : expression opt_params\n                | emptycall_func : IDENTIFIER opt_paramsif : IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else ENDpossible_else : ELSE statement END\n                     | emptyempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,13,14,15,17,19,22,23,24,25,26,32,34,35,36,39,40,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[5,5,-2,-3,22,-7,-8,-9,-10,-11,-21,35,-12,40,5,22,22,22,-28,-27,-20,51,-17,-13,53,54,-4,-26,-18,-14,-15,-19,-16,-22,-17,54,5,-25,-24,-23,5,5,-29,]),'OPEN_PAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,18,19,22,23,24,25,26,27,28,29,32,33,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[11,11,-2,-3,11,-7,-8,-9,-10,-11,11,33,-21,-12,38,41,11,11,11,11,-28,-27,33,33,38,-20,33,-17,-13,38,-32,38,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,11,-25,-24,-23,11,11,-29,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,19,22,23,24,25,26,27,28,29,32,33,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[12,12,-2,-3,12,-7,-8,-9,-10,-11,12,12,-21,-12,12,12,12,12,12,-28,-27,12,12,12,-20,12,-17,-13,12,-32,12,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,12,-25,-24,-23,12,12,-29,]),'NUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,19,22,23,24,25,26,27,28,29,32,33,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[13,13,-2,-3,13,-7,-8,-9,-10,-11,13,13,-21,-12,13,13,13,13,13,-28,-27,13,13,13,-20,13,-17,-13,13,-32,13,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,13,-25,-24,-23,13,13,-29,]),'COLON':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,19,22,23,24,25,26,27,28,29,32,33,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[14,14,-2,-3,14,-7,-8,-9,-10,-11,14,34,-21,-12,39,14,14,14,14,-28,-27,34,34,39,-20,34,-17,-13,39,-32,39,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,14,-25,-24,-23,14,14,-29,]),'BOOL':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,19,22,23,24,25,26,29,32,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[15,15,-2,-3,15,-7,-8,-9,-10,-11,15,-21,-12,15,15,15,15,15,-28,-27,15,-20,-17,-13,15,-32,15,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,15,-25,-24,-23,15,15,-29,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,13,15,16,19,22,23,24,25,26,29,32,35,36,38,40,41,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[16,16,-2,-3,16,-7,-8,-9,-10,-11,16,-21,-12,16,16,16,16,16,-28,-27,16,-20,-17,-13,16,-32,16,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,16,-25,-24,-23,16,16,-29,]),'TO':([0,2,3,4,5,6,7,8,9,10,13,15,19,22,23,24,25,26,32,35,36,40,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[17,17,-2,-3,17,-7,-8,-9,-10,-11,-21,-12,17,17,17,17,-28,-27,-20,-17,-13,-32,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,17,-25,-24,-23,17,17,-29,]),'IF':([0,2,3,4,5,6,7,8,9,10,13,15,19,22,23,24,25,26,32,35,36,40,43,44,45,46,47,48,49,51,53,54,55,56,58,61,62,65,67,],[18,18,-2,-3,18,-7,-8,-9,-10,-11,-21,-12,18,18,18,18,-28,-27,-20,-17,-13,-32,-4,-26,-18,-14,-15,-19,-16,-22,-17,-32,18,-25,-24,-23,18,18,-29,]),'$end':([1,2,3,4,5,6,7,8,9,10,13,15,19,20,21,22,24,25,26,32,35,36,42,43,44,45,46,47,48,49,51,53,61,67,],[0,-32,-2,-3,-32,-7,-8,-9,-10,-11,-21,-12,-32,-1,-6,-32,-32,-28,-27,-20,-17,-13,-5,-4,-26,-18,-14,-15,-19,-16,-22,-17,-23,-29,]),'END':([3,4,5,6,7,8,9,10,13,15,22,24,25,26,32,35,36,43,44,45,46,47,48,49,51,53,59,61,63,64,66,67,68,69,],[-2,-3,-32,-7,-8,-9,-10,-11,-21,-12,-32,-32,-28,-27,-20,-17,-13,-4,-26,-18,-14,-15,-19,-16,-22,-17,61,-23,-32,67,-31,-29,69,-30,]),'ELSE':([3,4,5,6,7,8,9,10,13,15,22,24,25,26,32,35,36,43,44,45,46,47,48,49,51,53,61,63,67,],[-2,-3,-32,-7,-8,-9,-10,-11,-21,-12,-32,-32,-28,-27,-20,-17,-13,-4,-26,-18,-14,-15,-19,-16,-22,-17,-23,65,-29,]),'EQUALS':([5,],[23,]),'NUMBER_OP':([6,13,30,32,35,37,45,46,48,50,51,52,53,],[27,-21,27,27,-22,27,27,27,-19,27,-22,27,-22,]),'REL_OP':([6,13,30,32,35,37,45,48,51,52,53,],[28,-21,28,-20,-22,28,-18,-19,-22,28,-22,]),'AND_OR':([7,13,15,31,32,35,36,45,46,47,48,49,51,53,57,],[29,-21,-12,29,-20,-17,29,-18,-14,29,-19,-16,-22,-17,29,]),'CLOSE_PAR':([13,15,30,31,32,35,36,45,46,47,48,49,50,51,52,53,57,],[-21,-12,48,49,-20,-17,-13,-18,-14,-15,-19,-16,48,-22,48,-17,60,]),'THEN':([60,],[62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,2,19,55,62,65,],[2,19,19,59,63,68,]),'assign':([0,2,19,55,62,65,],[3,3,3,3,3,3,]),'expression':([0,2,5,19,22,23,24,55,62,65,],[4,4,24,4,24,43,24,4,4,4,]),'num_expression':([0,2,5,11,12,16,19,22,23,24,27,28,29,33,38,41,55,62,65,],[6,6,6,30,32,37,6,6,6,6,45,46,37,50,52,37,6,6,6,]),'bool_expression':([0,2,5,11,16,19,22,23,24,29,38,41,55,62,65,],[7,7,7,31,36,7,7,7,7,47,31,57,7,7,7,]),'func':([0,2,5,19,22,23,24,55,62,65,],[8,8,8,8,8,8,8,8,8,8,]),'call_func':([0,2,5,19,22,23,24,55,62,65,],[9,9,9,9,9,9,9,9,9,9,]),'if':([0,2,5,19,22,23,24,55,62,65,],[10,10,10,10,10,10,10,10,10,10,]),'other_statement':([2,19,],[20,42,]),'empty':([2,5,19,22,24,40,54,63,],[21,26,21,26,26,56,56,66,]),'opt_params':([5,22,24,],[25,25,44,]),'opt_args':([40,54,],[55,58,]),'possible_else':([63,],[64,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement other_statement','program',2,'p_program','main.py',90),
  ('statement -> assign','statement',1,'p_statement','main.py',99),
  ('statement -> expression','statement',1,'p_statement','main.py',100),
  ('assign -> IDENTIFIER EQUALS expression','assign',3,'p_assign','main.py',108),
  ('other_statement -> statement other_statement','other_statement',2,'p_other_statement','main.py',117),
  ('other_statement -> empty','other_statement',1,'p_other_statement','main.py',118),
  ('expression -> num_expression','expression',1,'p_expression','main.py',129),
  ('expression -> bool_expression','expression',1,'p_expression','main.py',130),
  ('expression -> func','expression',1,'p_expression','main.py',131),
  ('expression -> call_func','expression',1,'p_expression','main.py',132),
  ('expression -> if','expression',1,'p_expression','main.py',133),
  ('bool_expression -> BOOL','bool_expression',1,'p_bool_expression_bool','main.py',141),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_bool_expression_not','main.py',148),
  ('bool_expression -> num_expression REL_OP num_expression','bool_expression',3,'p_bool_expression_rel_op','main.py',156),
  ('bool_expression -> bool_expression AND_OR bool_expression','bool_expression',3,'p_bool_expression_and_or','main.py',165),
  ('bool_expression -> OPEN_PAR bool_expression CLOSE_PAR','bool_expression',3,'p_bool_expression_bool_expression','main.py',174),
  ('bool_expression -> COLON IDENTIFIER','bool_expression',2,'p_bool_expression_identifier','main.py',183),
  ('num_expression -> num_expression NUMBER_OP num_expression','num_expression',3,'p_num_expression','main.py',191),
  ('num_expression -> OPEN_PAR num_expression CLOSE_PAR','num_expression',3,'p_num_expression_parenthesis','main.py',200),
  ('num_expression -> MINUS num_expression','num_expression',2,'p_num_expression_minus','main.py',209),
  ('num_expression -> NUM','num_expression',1,'p_num_expression_num','main.py',217),
  ('num_expression -> COLON IDENTIFIER','num_expression',2,'p_num_expression_identifier','main.py',224),
  ('func -> TO IDENTIFIER opt_args statement END','func',5,'p_func','main.py',232),
  ('opt_args -> IDENTIFIER opt_args','opt_args',2,'p_opt_args','main.py',244),
  ('opt_args -> empty','opt_args',1,'p_opt_args','main.py',245),
  ('opt_params -> expression opt_params','opt_params',2,'p_opt_params','main.py',255),
  ('opt_params -> empty','opt_params',1,'p_opt_params','main.py',256),
  ('call_func -> IDENTIFIER opt_params','call_func',2,'p_call_func','main.py',266),
  ('if -> IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else END','if',8,'p_if','main.py',274),
  ('possible_else -> ELSE statement END','possible_else',3,'p_possible_else','main.py',288),
  ('possible_else -> empty','possible_else',1,'p_possible_else','main.py',289),
  ('empty -> <empty>','empty',0,'p_empty','main.py',299),
]
