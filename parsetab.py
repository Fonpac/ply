
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEPOWERAND_OR BOOL BOOL CLOSE_PAR COLON DIVIDE ELSE END EQUALS IDENTIFIER IF MINUS NOT NUM OPEN_PAR PLUS POWER REL_OP THEN TIMES TOprogram : statement other_statementstatement : assign\n                 | expression\n                 | if\n    assign : IDENTIFIER EQUALS expressionother_statement : statement other_statement\n                       | empty\n    expression : num_expression\n                  | bool_expression\n                  | func\n                  | call_func\n    bool_expression : BOOLbool_expression : NOT bool_expressionbool_expression : num_expression REL_OP num_expressionbool_expression : bool_expression AND_OR bool_expressionbool_expression : OPEN_PAR bool_expression CLOSE_PARbool_expression : COLON IDENTIFIERnum_expression : num_expression PLUS num_expression\n                      | num_expression MINUS num_expression\n                      | num_expression TIMES num_expression\n                      | num_expression DIVIDE num_expression\n                      | num_expression POWER num_expression\n    num_expression : OPEN_PAR num_expression CLOSE_PARnum_expression : MINUS num_expressionnum_expression : NUMnum_expression : COLON IDENTIFIERfunc : TO IDENTIFIER opt_args statement ENDopt_args : IDENTIFIER opt_args\n                | emptyopt_params : expression opt_params\n                  | emptycall_func : IDENTIFIER opt_paramsif : IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else ENDpossible_else : ELSE statement END\n                     | emptyempty :'
    
_lr_action_items = {'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,14,15,16,18,19,22,23,24,25,26,37,39,40,41,44,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[6,6,-2,-3,-4,22,-8,-9,-10,-11,-25,40,-12,45,6,22,22,22,-32,-31,-24,60,-17,-13,62,63,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,63,6,-29,-28,6,-27,6,-33,]),'IF':([0,2,3,4,5,6,7,8,9,10,14,16,19,22,24,25,26,37,40,41,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[11,11,-2,-3,-4,-36,-8,-9,-10,-11,-25,-12,11,-36,-36,-32,-31,-24,-17,-13,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,11,-29,-28,11,-27,11,-33,]),'OPEN_PAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,40,41,43,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[12,12,-2,-3,-4,12,-8,-9,-10,-11,34,12,38,-25,-12,43,12,12,12,12,-32,-31,38,38,38,38,38,38,43,43,-24,38,-17,-13,43,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,12,-29,-28,12,-27,12,-33,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,40,41,42,43,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,67,69,70,73,75,],[13,13,-2,-3,-4,13,28,-9,-10,-11,13,13,-25,-12,13,13,13,13,13,-32,-31,13,13,13,13,13,13,13,13,28,-24,13,-17,-13,28,13,-36,-5,-30,-18,-19,-20,-21,-22,28,-15,-23,-16,28,-26,28,-17,-36,13,-29,-28,13,-27,13,-33,]),'NUM':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,40,41,43,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[14,14,-2,-3,-4,14,-8,-9,-10,-11,14,14,-25,-12,14,14,14,14,14,-32,-31,14,14,14,14,14,14,14,14,-24,14,-17,-13,14,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,14,-29,-28,14,-27,14,-33,]),'COLON':([0,2,3,4,5,6,7,8,9,10,12,13,14,16,17,19,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,40,41,43,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[15,15,-2,-3,-4,15,-8,-9,-10,-11,15,39,-25,-12,44,15,15,15,15,-32,-31,39,39,39,39,39,39,44,44,-24,39,-17,-13,44,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,15,-29,-28,15,-27,15,-33,]),'BOOL':([0,2,3,4,5,6,7,8,9,10,12,14,16,17,19,22,23,24,25,26,33,34,37,40,41,43,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[16,16,-2,-3,-4,16,-8,-9,-10,-11,16,-25,-12,16,16,16,16,16,-32,-31,16,16,-24,-17,-13,16,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,16,-29,-28,16,-27,16,-33,]),'NOT':([0,2,3,4,5,6,7,8,9,10,12,14,16,17,19,22,23,24,25,26,33,34,37,40,41,43,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[17,17,-2,-3,-4,17,-8,-9,-10,-11,17,-25,-12,17,17,17,17,17,-32,-31,17,17,-24,-17,-13,17,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,17,-29,-28,17,-27,17,-33,]),'TO':([0,2,3,4,5,6,7,8,9,10,14,16,19,22,23,24,25,26,37,40,41,45,47,48,49,50,51,52,53,54,55,57,58,60,62,63,64,65,67,69,70,73,75,],[18,18,-2,-3,-4,18,-8,-9,-10,-11,-25,-12,18,18,18,18,-32,-31,-24,-17,-13,-36,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-36,18,-29,-28,18,-27,18,-33,]),'$end':([1,2,3,4,5,6,7,8,9,10,14,16,19,20,21,22,24,25,26,37,40,41,46,47,48,49,50,51,52,53,54,55,57,58,60,62,70,75,],[0,-36,-2,-3,-4,-36,-8,-9,-10,-11,-25,-12,-36,-1,-7,-36,-36,-32,-31,-24,-17,-13,-6,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-27,-33,]),'END':([3,4,5,6,7,8,9,10,14,16,22,24,25,26,37,40,41,47,48,49,50,51,52,53,54,55,57,58,60,62,68,70,71,72,74,75,76,77,],[-2,-3,-4,-36,-8,-9,-10,-11,-25,-12,-36,-36,-32,-31,-24,-17,-13,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,70,-27,-36,75,-35,-33,77,-34,]),'ELSE':([3,4,5,6,7,8,9,10,14,16,22,24,25,26,37,40,41,47,48,49,50,51,52,53,54,55,57,58,60,62,70,71,75,],[-2,-3,-4,-36,-8,-9,-10,-11,-25,-12,-36,-36,-32,-31,-24,-17,-13,-5,-30,-18,-19,-20,-21,-22,-14,-15,-23,-16,-26,-17,-27,73,-33,]),'EQUALS':([6,],[23,]),'PLUS':([7,14,35,37,40,42,49,50,51,52,53,54,57,59,60,61,62,],[27,-25,27,-24,-26,27,-18,-19,-20,-21,-22,27,-23,27,-26,27,-26,]),'TIMES':([7,14,35,37,40,42,49,50,51,52,53,54,57,59,60,61,62,],[29,-25,29,29,-26,29,29,29,-20,-21,-22,29,-23,29,-26,29,-26,]),'DIVIDE':([7,14,35,37,40,42,49,50,51,52,53,54,57,59,60,61,62,],[30,-25,30,30,-26,30,30,30,-20,-21,-22,30,-23,30,-26,30,-26,]),'POWER':([7,14,35,37,40,42,49,50,51,52,53,54,57,59,60,61,62,],[31,-25,31,31,-26,31,31,31,-20,-21,-22,31,-23,31,-26,31,-26,]),'REL_OP':([7,14,35,37,40,42,49,50,51,52,53,57,60,61,62,],[32,-25,32,-24,-26,32,-18,-19,-20,-21,-22,-23,-26,32,-26,]),'AND_OR':([8,14,16,36,37,40,41,49,50,51,52,53,54,55,56,57,58,60,62,],[33,-25,-12,33,-24,-17,33,-18,-19,-20,-21,-22,-14,33,33,-23,-16,-26,-17,]),'CLOSE_PAR':([14,16,35,36,37,40,41,49,50,51,52,53,54,55,56,57,58,59,60,61,62,],[-25,-12,57,58,-24,-17,-13,-18,-19,-20,-21,-22,-14,-15,66,-23,-16,57,-26,57,-17,]),'THEN':([66,],[69,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement':([0,2,19,64,69,73,],[2,19,19,68,71,76,]),'assign':([0,2,19,64,69,73,],[3,3,3,3,3,3,]),'expression':([0,2,6,19,22,23,24,64,69,73,],[4,4,24,4,24,47,24,4,4,4,]),'if':([0,2,19,64,69,73,],[5,5,5,5,5,5,]),'num_expression':([0,2,6,12,13,17,19,22,23,24,27,28,29,30,31,32,33,34,38,43,64,69,73,],[7,7,7,35,37,42,7,7,7,7,49,50,51,52,53,54,42,42,59,61,7,7,7,]),'bool_expression':([0,2,6,12,17,19,22,23,24,33,34,43,64,69,73,],[8,8,8,36,41,8,8,8,8,55,56,36,8,8,8,]),'func':([0,2,6,19,22,23,24,64,69,73,],[9,9,9,9,9,9,9,9,9,9,]),'call_func':([0,2,6,19,22,23,24,64,69,73,],[10,10,10,10,10,10,10,10,10,10,]),'other_statement':([2,19,],[20,46,]),'empty':([2,6,19,22,24,45,63,71,],[21,26,21,26,26,65,65,74,]),'opt_params':([6,22,24,],[25,25,48,]),'opt_args':([45,63,],[64,67,]),'possible_else':([71,],[72,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement other_statement','program',2,'p_program','main.py',107),
  ('statement -> assign','statement',1,'p_statement','main.py',112),
  ('statement -> expression','statement',1,'p_statement','main.py',113),
  ('statement -> if','statement',1,'p_statement','main.py',114),
  ('assign -> IDENTIFIER EQUALS expression','assign',3,'p_assign','main.py',120),
  ('other_statement -> statement other_statement','other_statement',2,'p_other_statement','main.py',129),
  ('other_statement -> empty','other_statement',1,'p_other_statement','main.py',130),
  ('expression -> num_expression','expression',1,'p_expression','main.py',139),
  ('expression -> bool_expression','expression',1,'p_expression','main.py',140),
  ('expression -> func','expression',1,'p_expression','main.py',141),
  ('expression -> call_func','expression',1,'p_expression','main.py',142),
  ('bool_expression -> BOOL','bool_expression',1,'p_bool_expression_bool','main.py',148),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_bool_expression_not','main.py',155),
  ('bool_expression -> num_expression REL_OP num_expression','bool_expression',3,'p_bool_expression_rel_op','main.py',163),
  ('bool_expression -> bool_expression AND_OR bool_expression','bool_expression',3,'p_bool_expression_and_or','main.py',172),
  ('bool_expression -> OPEN_PAR bool_expression CLOSE_PAR','bool_expression',3,'p_bool_expression_bool_expression','main.py',181),
  ('bool_expression -> COLON IDENTIFIER','bool_expression',2,'p_bool_expression_identifier','main.py',190),
  ('num_expression -> num_expression PLUS num_expression','num_expression',3,'p_num_expression','main.py',195),
  ('num_expression -> num_expression MINUS num_expression','num_expression',3,'p_num_expression','main.py',196),
  ('num_expression -> num_expression TIMES num_expression','num_expression',3,'p_num_expression','main.py',197),
  ('num_expression -> num_expression DIVIDE num_expression','num_expression',3,'p_num_expression','main.py',198),
  ('num_expression -> num_expression POWER num_expression','num_expression',3,'p_num_expression','main.py',199),
  ('num_expression -> OPEN_PAR num_expression CLOSE_PAR','num_expression',3,'p_num_expression_parenthesis','main.py',215),
  ('num_expression -> MINUS num_expression','num_expression',2,'p_num_expression_minus','main.py',224),
  ('num_expression -> NUM','num_expression',1,'p_num_expression_num','main.py',232),
  ('num_expression -> COLON IDENTIFIER','num_expression',2,'p_num_expression_identifier','main.py',239),
  ('func -> TO IDENTIFIER opt_args statement END','func',5,'p_func','main.py',244),
  ('opt_args -> IDENTIFIER opt_args','opt_args',2,'p_opt_args','main.py',256),
  ('opt_args -> empty','opt_args',1,'p_opt_args','main.py',257),
  ('opt_params -> expression opt_params','opt_params',2,'p_opt_params','main.py',267),
  ('opt_params -> empty','opt_params',1,'p_opt_params','main.py',268),
  ('call_func -> IDENTIFIER opt_params','call_func',2,'p_call_func','main.py',277),
  ('if -> IF OPEN_PAR bool_expression CLOSE_PAR THEN statement possible_else END','if',8,'p_if','main.py',282),
  ('possible_else -> ELSE statement END','possible_else',3,'p_possible_else','main.py',296),
  ('possible_else -> empty','possible_else',1,'p_possible_else','main.py',297),
  ('empty -> <empty>','empty',0,'p_empty','main.py',307),
]
